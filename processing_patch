
PImage[] photo = new PImage[6];

int[][] grid, futureGrid;

void setup() {
  size(1000, 668);

  for (int i=0; i< photo.length; i++) {
    photo[i] = loadImage("crowd"+i+".jpg");

    frameRate(8);
    
    grid = new int[width][height]; 
    futureGrid = new int[width][height]; 
    float density = 0.1 * width * height; // Set a random initial state // PLAY AROUND WIT SCALE + ALSO GET THIS TO REPEAT!
    for (int a = 0; a < density; a++) { 
      int rx = int(random(width));
      int ry = int(random(height)); 
      grid[rx][ry] = 1;
    }
  }
}

void draw() {

  int index = int(random(0, photo.length));  
  image(photo[index], 0, 0);
  // color c = get (400, 400);
  for (int x = 1; x < width-1; x++) {
    for (int y = 1; y < height-1; y++) {
      // Check the number of neighbors (adjacent cells)
      int nb = neighbors(x, y);
      if ((grid[x][y] == 0) && (nb == 3)) {
        futureGrid[x][y] = 1; // Birth
   set(x, y, photo[index]);
      } else {
   futureGrid[x][y] = grid[x][y]; // No change
      }
    }
  }
  // Swap current and future grids
  int[][] temp = grid; 
  grid = futureGrid; 
  futureGrid = temp;
}

// Function Counts the number of adjacent cells that are 'on'
int neighbors(int x, int y) {
  return grid[x][y-1] +   // North
    grid[x+1][y-1] + // Northeast
    grid[x+1][y] + // East
    grid[x+1][y+1] + // Southeast
    grid[x][y+1] +   // South
    grid[x-1][y+1] + // Southwest
    grid[x-1][y] +    //West
    grid[x-1][y-1];  //Northwest
}
